{"version":3,"sources":["webpack:///./src/app/core/resolver/content.resolver.ts","webpack:///./src/app/modules/login/login-routing.module.ts","webpack:///./src/app/modules/login/login.component.html","webpack:///./src/app/modules/login/login.component.scss","webpack:///./src/app/modules/login/login.component.ts","webpack:///./src/app/modules/login/login.module.ts"],"names":[],"mappings":"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","file":"modules-login-login-module.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { HttpRequestService } from '../services/http/http-request.service';\r\nimport { Observable, of } from 'rxjs';\r\nimport { HttpRequestModal } from '../services/http/http-request.modal';\r\nimport { environment } from '../../../environments/environment';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { retry, catchError } from 'rxjs/operators';\r\nimport { GLOBAL_PROPERTIES } from '../constant/common.constant';\r\nimport { HttpBehaviorRequestInterface } from '../services/http/http-optional-request.interface';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ContentResolver implements Resolve<any> {\r\n    apiBehaviorParams: HttpBehaviorRequestInterface = {\r\n        isSpinner: true,\r\n        isEncrypted: false,\r\n        preAuth: false,\r\n        isIbmApi: false,\r\n        apiStub: true,\r\n        apiRetry: true,\r\n        apiTimeOut: GLOBAL_PROPERTIES.REQUEST_TIMEOUT\r\n      };\r\n  constructor(private commonSrv: HttpRequestService, private http: HttpClient, private router: Router) {}\r\n\r\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any>|Promise<any>|any {\r\n    const payload = {};\r\n    const requestModal = new HttpRequestModal(state.url, 'GET', payload, this.apiBehaviorParams);\r\n    if (!this.apiBehaviorParams.apiStub) {\r\n        return this.commonSrv.createHttpRequest(requestModal)\r\n        .pipe(retry(1))\r\n        .pipe(catchError((error: any) => {\r\n        console.log(error);\r\n        return of(undefined);\r\n        }));\r\n    }\r\n    const url = './assets/json/get/prisimic/' + state.url.split('/').pop() + '.json';\r\n    return this.http.get(url)\r\n        .pipe(catchError((error: any) => {\r\n        console.log(error);\r\n        return of(undefined);\r\n    }));\r\n  }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport {LoginComponent} from './login.component';\r\nimport { ContentResolver } from '../../core/resolver/content.resolver';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '**',\r\n    component: LoginComponent,\r\n    pathMatch: 'full',\r\n    resolve: {\r\n      content: ContentResolver\r\n    }\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule { }\r\n","module.exports = \"<div class=\\\"container-fluid top-padd\\\">\\r\\n<div class=\\\"row\\\">\\r\\n<div class=\\\"col-md-4\\\"></div>\\r\\n<div class=\\\"col-md-4\\\">\\r\\n<section>\\r\\n  <mat-card>\\r\\n    <form [formGroup]=\\\"loginForm\\\">\\r\\n      <!--userId No.-->\\r\\n      <mat-form-field>\\r\\n        <input type=\\\"text\\\" maxlength=\\\"10\\\" matInput placeholder=\\\"{{content.userId.placeholder}}\\\" formControlName=\\\"userId\\\" appAlphaCharOnly >\\r\\n      </mat-form-field>\\r\\n      <span *ngIf=\\\"error.userId\\\">{{error.userId}}</span>\\r\\n      <!--Password-->\\r\\n      <mat-form-field>\\r\\n        <input type=\\\"{{inputType}}\\\" maxlength=\\\"10\\\" matInput placeholder=\\\"{{content.password.placeholder}}\\\" formControlName=\\\"password\\\" >\\r\\n      </mat-form-field>       \\r\\n      <span *ngIf=\\\"error.password\\\">{{error.password}}</span> \\r\\n      <button  class=\\\"btn-primary\\\" mat-button [disabled]=\\\"validateForm()\\\" (click)=\\\"onSubmit()\\\" >Login</button>\\r\\n      <a class=\\\"btn-primary\\\" mat-button [routerLink]=\\\"['/welcome']\\\" >Cancel</a>\\r\\n    </form>\\r\\n    </mat-card> \\r\\n</section>\\r\\n</div>\\r\\n<div class=\\\"col-md-4\\\"></div>\\r\\n</div>\\r\\n</div>\"","module.exports = \".login {\\n  /*background-image: url(\\\"/assets/images/auth/pic.png\\\");*/\\n  background-size: cover;\\n  background-position: center;\\n  /*opacity: 0.5;*/ }\\n  .login .auth-box {\\n    /*background:#3A8CAE;*/\\n    margin-left: 10px; }\\n  .login .text-left {\\n    font-size: 14;\\n    font-weight: 600; }\\n  .login .sub-text {\\n    color: #F3FFFF; }\\n  .login .text-right {\\n    color: #F3FFFF; }\\n  .login .re-size {\\n    height: 80px;\\n    width: 80px; }\\n  .container {\\n  background: lightgray;\\n  margin: 5px; }\\n  .btn-primary {\\n  display: block; }\\n  .mat-form-field {\\n  display: block; }\\n  .otp {\\n  position: absolute;\\n  z-index: 1000;\\n  bottom: 71px;\\n  display: block;\\n  color: #acacac;\\n  font-size: 12px; }\\n  .btn-primary {\\n  width: 100%;\\n  margin-top: 10px; }\\n  .top-padd {\\n  padding-top: 13%; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { LoginService } from './login.service';\r\nimport { AuthService } from '../../core/services/auth/auth.service';\r\nimport { DataService } from '../../core/services/data/data.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\n\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  companyId: string;\r\n  content: any;\r\n  inputType: string;\r\n  error: any;\r\n  otpFLow: boolean;\r\n  constructor( private _router: Router, private loginSrvc: LoginService, private route: ActivatedRoute, private auth: AuthService,private dataService:DataService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.inputType = 'password';\r\n    this.otpFLow = false;\r\n    this.error = {};\r\n    this.auth.onLoginNavigation();\r\n    this.route.data.subscribe( ({content}) => {\r\n      this.content = content;\r\n      console.log('login content data resolved', this.content);\r\n    });\r\n\r\n    this.loginForm = new FormGroup({\r\n      'userId': new FormControl('', Validators.compose([Validators.required])),\r\n      'password': new FormControl('', Validators.compose([Validators.required]))\r\n    }, {updateOn: 'blur'});\r\n\r\n    this.loginForm.valueChanges.subscribe( (data) => {\r\n      console.log('value change', data);\r\n      this.validateChanges(data);\r\n    });\r\n  }\r\n\r\n  validateChanges(data) {\r\n    const userIdField = this.loginForm.get('userId');\r\n    const pswrdField = this.loginForm.get('password');\r\n\r\n    if ( userIdField.value.length == 0 && (userIdField.touched || userIdField.dirty)) {\r\n      this.error = {\r\n        'userId' : 'Please enter a valid user Id'\r\n      };\r\n      userIdField.setErrors(this.error.userId);\r\n    } else if (userIdField.touched || userIdField.dirty) {\r\n      this.error.userId = null;\r\n      if (userIdField.value.length > 0) {\r\n        userIdField.setErrors(null);\r\n      }\r\n    }\r\n    if ( pswrdField.value.length == 0 && (pswrdField.dirty || pswrdField.touched)) {\r\n      this.error.password = 'Please enter a valid password';\r\n      pswrdField.setErrors(this.error.password);\r\n    } else if ( pswrdField.dirty || pswrdField.touched ) {\r\n      this.error.password = null;\r\n      if (userIdField.value.length > 0) {\r\n        pswrdField.setErrors(null);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  onSubmit() {\r\n      this.loginSrvc.verifyUser(this.loginForm.value).subscribe(\r\n        (res: any) => {\r\n          this.auth.successHandler(res);\r\n          let userId = this.loginForm.get('userId').value;\r\n          this.dataService.setUserId(userId);\r\n          this._router.navigate(['/home']);\r\n        }, err => {\r\n          this.auth.errorHandler(err);\r\n        });\r\n  }\r\n\r\n  validateForm() {\r\n    return !this.loginForm.valid;\r\n  }\r\n\r\n  /*for show/hide password*/\r\n  toggleInputType() {\r\n    this.inputType = (this.inputType === 'text') ? 'password' : 'text';\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LoginRoutingModule } from './login-routing.module';\r\nimport { LoginComponent} from './login.component';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { MatFormFieldModule, MatInput, MatInputModule, MatIconModule, MatLabel } from '@angular/material';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    LoginRoutingModule,\r\n    SharedModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  declarations: [LoginComponent]\r\n})\r\nexport class LoginModule { }\r\n"],"sourceRoot":""}